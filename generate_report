#!/usr/bin/env python3

import psycopg2
import yaml
import datetime
import re

conn = psycopg2.connect("dbname=budgetron")

cur = conn.cursor()

cur.execute("SELECT date FROM transactions ORDER BY date DESC LIMIT 1;")
last_date = cur.fetchone()[0]

def previous_month(date):
    return (datetime.date(date.year, date.month, 1), datetime.date(date.year, date.month+1, 1))

    month = 12 if date.month == 1 else date.month - 1
    year = date.year - 1 if date.month == 1 else date.year

    start = datetime.date(year, month, 1)
    end = datetime.date(date.year, date.month, 1)


    return (start, end)

def produce_report(start_date, end_date, accounts_re, keep_cat_re, kill_cat_re, keep_des_re, kill_des_re):
    print("Producing report for %s - %s" % (start_date, end_date))
    data = {
        'start_date': start_date,
        'end_date': end_date,
        'accounts_re': accounts_re,
        'keep_cat_re': keep_cat_re,
        'kill_cat_re': kill_cat_re,
        'keep_des_re': keep_des_re,
        'kill_des_re': kill_des_re,
    }
    where = """
        date > %(start_date)s AND date < %(end_date)s
        AND (
            account_name ~ %(accounts_re)s OR
            original_category ~ %(keep_cat_re)s OR
            description ~ %(keep_des_re)s
        )
        AND original_category !~ %(kill_cat_re)s
        AND description !~ %(kill_des_re)s
    """
    income_total_query = """
        SELECT sum(amount)
            FROM transactions
            WHERE %s
            AND transaction_type = 'Credit';
    """ % where
    cur.execute(income_total_query, data);

    print("Income:", cur.fetchone()[0])
    print()

    expense_totals_query = """
        SELECT sum(amount), category
            FROM transactions
            WHERE %s
            AND transaction_type = 'Debit'
            GROUP BY category
            ORDER BY sum DESC;
    """ % where

    # print(cur.mogrify(expense_totals_query, data).decode('utf-8'))
    cur.execute(expense_totals_query, data)

    print("Expenses:")
    total = 0
    for category in cur.fetchall():
        total += float(category[0])
        print("%s: %.02f" % (category[1], float(category[0])))
    print("Total: %.02f" % total)


budget_config = yaml.load(open("budgets.yaml", 'r').read())

owned_categories = set()
owned_descriptions = set()
for info in budget_config.values():
    owned_categories |= set(info.get('categories', []))
    owned_descriptions |= set(info.get('descriptions', []))

def keep_and_kill(total, this):
    keep_set = set(this)
    kill_set = total - keep_set
    if keep_set == set():
        keep_set = set(["XXX"])
    if kill_set == set():
        kill_set = set(["XXX"])

    keep = "(%s)" % '|'.join(keep_set)
    kill = "(%s)" % '|'.join(kill_set)

    return (keep, kill)

for person, info in budget_config.items():
    accounts_re = "(%s)" % '|'.join(info.get('accounts', []))
    keep_cat, kill_cat = keep_and_kill(owned_categories, info.get('categories', []))
    keep_des, kill_des = keep_and_kill(owned_descriptions, info.get('descriptions', []))

    print()
    print(person)
    produce_report(*previous_month(last_date), accounts_re, keep_cat, kill_cat, keep_des,
            kill_des)


# produce_report(*previous_month(last_date), "Molly")
# produce_report(*previous_month(last_date), "Zach")


